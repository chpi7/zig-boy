pub const OpType = enum { ADC, ADD, AND, BIT, CALL, CCF, CP, CPL, DAA, DEC, DI, EI, HALT, ILLEGAL, INC, JP, JR, LD, LDH, NOP, OR, POP, PREFIX, PUSH, RES, RET, RETI, RL, RLA, RLC, RLCA, RR, RRA, RRC, RRCA, RST, SBC, SCF, SET, SLA, SRA, SRL, STOP, SUB, SWAP, XOR };
pub const Register = enum { A, F, B, C, D, E, H, L, AF, BC, DE, HL, SP, };
pub const ConditionCode = enum (u2) { nc = 0, z = 1, nz = 2, c = 3 };
pub const OperandType = enum { unused, reg8, reg16, imm8, imm16, bit3, vec, cc, };
pub const Operand = struct { t: OperandType, register: Register = Register.A, value: u16 = 0, relative: bool = false, cc: ConditionCode = ConditionCode.nc, };
pub const Instruction = struct { opcode: u8 = 0, op: OpType, operands: [3]Operand, num_operands: u2 , bytes: u2, };
pub fn decode_instruction(opcode: u8) Instruction {
    const result = switch (opcode) {
        0x00 => Instruction{ .opcode = 0x00, .op = OpType.NOP, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x01 => Instruction{ .opcode = 0x01, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.BC }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0x02 => Instruction{ .opcode = 0x02, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.BC }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x03 => Instruction{ .opcode = 0x03, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.BC }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x04 => Instruction{ .opcode = 0x04, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x05 => Instruction{ .opcode = 0x05, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x06 => Instruction{ .opcode = 0x06, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x07 => Instruction{ .opcode = 0x07, .op = OpType.RLCA, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x08 => Instruction{ .opcode = 0x08, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.imm16, .relative = true }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0x09 => Instruction{ .opcode = 0x09, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.BC }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x0a => Instruction{ .opcode = 0x0a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.BC }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x0b => Instruction{ .opcode = 0x0b, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.BC }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x0c => Instruction{ .opcode = 0x0c, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x0d => Instruction{ .opcode = 0x0d, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x0e => Instruction{ .opcode = 0x0e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x0f => Instruction{ .opcode = 0x0f, .op = OpType.RRCA, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x10 => Instruction{ .opcode = 0x10, .op = OpType.STOP, .operands = .{ Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x11 => Instruction{ .opcode = 0x11, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.DE }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0x12 => Instruction{ .opcode = 0x12, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.DE }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x13 => Instruction{ .opcode = 0x13, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.DE }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x14 => Instruction{ .opcode = 0x14, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x15 => Instruction{ .opcode = 0x15, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x16 => Instruction{ .opcode = 0x16, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x17 => Instruction{ .opcode = 0x17, .op = OpType.RLA, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x18 => Instruction{ .opcode = 0x18, .op = OpType.JR, .operands = .{ Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x19 => Instruction{ .opcode = 0x19, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.DE }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x1a => Instruction{ .opcode = 0x1a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.DE }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x1b => Instruction{ .opcode = 0x1b, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.DE }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x1c => Instruction{ .opcode = 0x1c, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x1d => Instruction{ .opcode = 0x1d, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x1e => Instruction{ .opcode = 0x1e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x1f => Instruction{ .opcode = 0x1f, .op = OpType.RRA, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x20 => Instruction{ .opcode = 0x20, .op = OpType.JR, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nz }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x21 => Instruction{ .opcode = 0x21, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0x22 => Instruction{ .opcode = 0x22, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x23 => Instruction{ .opcode = 0x23, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x24 => Instruction{ .opcode = 0x24, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x25 => Instruction{ .opcode = 0x25, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x26 => Instruction{ .opcode = 0x26, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x27 => Instruction{ .opcode = 0x27, .op = OpType.DAA, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x28 => Instruction{ .opcode = 0x28, .op = OpType.JR, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.z }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x29 => Instruction{ .opcode = 0x29, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x2a => Instruction{ .opcode = 0x2a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x2b => Instruction{ .opcode = 0x2b, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x2c => Instruction{ .opcode = 0x2c, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x2d => Instruction{ .opcode = 0x2d, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x2e => Instruction{ .opcode = 0x2e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x2f => Instruction{ .opcode = 0x2f, .op = OpType.CPL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x30 => Instruction{ .opcode = 0x30, .op = OpType.JR, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nc }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x31 => Instruction{ .opcode = 0x31, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0x32 => Instruction{ .opcode = 0x32, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x33 => Instruction{ .opcode = 0x33, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x34 => Instruction{ .opcode = 0x34, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x35 => Instruction{ .opcode = 0x35, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x36 => Instruction{ .opcode = 0x36, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x37 => Instruction{ .opcode = 0x37, .op = OpType.SCF, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x38 => Instruction{ .opcode = 0x38, .op = OpType.JR, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.c }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x39 => Instruction{ .opcode = 0x39, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x3a => Instruction{ .opcode = 0x3a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x3b => Instruction{ .opcode = 0x3b, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x3c => Instruction{ .opcode = 0x3c, .op = OpType.INC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x3d => Instruction{ .opcode = 0x3d, .op = OpType.DEC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0x3e => Instruction{ .opcode = 0x3e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x3f => Instruction{ .opcode = 0x3f, .op = OpType.CCF, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x40 => Instruction{ .opcode = 0x40, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x41 => Instruction{ .opcode = 0x41, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x42 => Instruction{ .opcode = 0x42, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x43 => Instruction{ .opcode = 0x43, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x44 => Instruction{ .opcode = 0x44, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x45 => Instruction{ .opcode = 0x45, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x46 => Instruction{ .opcode = 0x46, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x47 => Instruction{ .opcode = 0x47, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x48 => Instruction{ .opcode = 0x48, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x49 => Instruction{ .opcode = 0x49, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x4a => Instruction{ .opcode = 0x4a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x4b => Instruction{ .opcode = 0x4b, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x4c => Instruction{ .opcode = 0x4c, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x4d => Instruction{ .opcode = 0x4d, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x4e => Instruction{ .opcode = 0x4e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x4f => Instruction{ .opcode = 0x4f, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x50 => Instruction{ .opcode = 0x50, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x51 => Instruction{ .opcode = 0x51, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x52 => Instruction{ .opcode = 0x52, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x53 => Instruction{ .opcode = 0x53, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x54 => Instruction{ .opcode = 0x54, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x55 => Instruction{ .opcode = 0x55, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x56 => Instruction{ .opcode = 0x56, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x57 => Instruction{ .opcode = 0x57, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x58 => Instruction{ .opcode = 0x58, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x59 => Instruction{ .opcode = 0x59, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x5a => Instruction{ .opcode = 0x5a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x5b => Instruction{ .opcode = 0x5b, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x5c => Instruction{ .opcode = 0x5c, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x5d => Instruction{ .opcode = 0x5d, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x5e => Instruction{ .opcode = 0x5e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x5f => Instruction{ .opcode = 0x5f, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x60 => Instruction{ .opcode = 0x60, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x61 => Instruction{ .opcode = 0x61, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x62 => Instruction{ .opcode = 0x62, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x63 => Instruction{ .opcode = 0x63, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x64 => Instruction{ .opcode = 0x64, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x65 => Instruction{ .opcode = 0x65, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x66 => Instruction{ .opcode = 0x66, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x67 => Instruction{ .opcode = 0x67, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x68 => Instruction{ .opcode = 0x68, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x69 => Instruction{ .opcode = 0x69, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x6a => Instruction{ .opcode = 0x6a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x6b => Instruction{ .opcode = 0x6b, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x6c => Instruction{ .opcode = 0x6c, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x6d => Instruction{ .opcode = 0x6d, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x6e => Instruction{ .opcode = 0x6e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x6f => Instruction{ .opcode = 0x6f, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x70 => Instruction{ .opcode = 0x70, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x71 => Instruction{ .opcode = 0x71, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x72 => Instruction{ .opcode = 0x72, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x73 => Instruction{ .opcode = 0x73, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x74 => Instruction{ .opcode = 0x74, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x75 => Instruction{ .opcode = 0x75, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x76 => Instruction{ .opcode = 0x76, .op = OpType.HALT, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0x77 => Instruction{ .opcode = 0x77, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x78 => Instruction{ .opcode = 0x78, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x79 => Instruction{ .opcode = 0x79, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x7a => Instruction{ .opcode = 0x7a, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x7b => Instruction{ .opcode = 0x7b, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x7c => Instruction{ .opcode = 0x7c, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x7d => Instruction{ .opcode = 0x7d, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x7e => Instruction{ .opcode = 0x7e, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x7f => Instruction{ .opcode = 0x7f, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x80 => Instruction{ .opcode = 0x80, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x81 => Instruction{ .opcode = 0x81, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x82 => Instruction{ .opcode = 0x82, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x83 => Instruction{ .opcode = 0x83, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x84 => Instruction{ .opcode = 0x84, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x85 => Instruction{ .opcode = 0x85, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x86 => Instruction{ .opcode = 0x86, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x87 => Instruction{ .opcode = 0x87, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x88 => Instruction{ .opcode = 0x88, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x89 => Instruction{ .opcode = 0x89, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x8a => Instruction{ .opcode = 0x8a, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x8b => Instruction{ .opcode = 0x8b, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x8c => Instruction{ .opcode = 0x8c, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x8d => Instruction{ .opcode = 0x8d, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x8e => Instruction{ .opcode = 0x8e, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x8f => Instruction{ .opcode = 0x8f, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x90 => Instruction{ .opcode = 0x90, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x91 => Instruction{ .opcode = 0x91, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x92 => Instruction{ .opcode = 0x92, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x93 => Instruction{ .opcode = 0x93, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x94 => Instruction{ .opcode = 0x94, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x95 => Instruction{ .opcode = 0x95, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x96 => Instruction{ .opcode = 0x96, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x97 => Instruction{ .opcode = 0x97, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x98 => Instruction{ .opcode = 0x98, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x99 => Instruction{ .opcode = 0x99, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x9a => Instruction{ .opcode = 0x9a, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x9b => Instruction{ .opcode = 0x9b, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x9c => Instruction{ .opcode = 0x9c, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x9d => Instruction{ .opcode = 0x9d, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x9e => Instruction{ .opcode = 0x9e, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0x9f => Instruction{ .opcode = 0x9f, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa0 => Instruction{ .opcode = 0xa0, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa1 => Instruction{ .opcode = 0xa1, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa2 => Instruction{ .opcode = 0xa2, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa3 => Instruction{ .opcode = 0xa3, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa4 => Instruction{ .opcode = 0xa4, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa5 => Instruction{ .opcode = 0xa5, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa6 => Instruction{ .opcode = 0xa6, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa7 => Instruction{ .opcode = 0xa7, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa8 => Instruction{ .opcode = 0xa8, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xa9 => Instruction{ .opcode = 0xa9, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xaa => Instruction{ .opcode = 0xaa, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xab => Instruction{ .opcode = 0xab, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xac => Instruction{ .opcode = 0xac, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xad => Instruction{ .opcode = 0xad, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xae => Instruction{ .opcode = 0xae, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xaf => Instruction{ .opcode = 0xaf, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb0 => Instruction{ .opcode = 0xb0, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb1 => Instruction{ .opcode = 0xb1, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb2 => Instruction{ .opcode = 0xb2, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb3 => Instruction{ .opcode = 0xb3, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb4 => Instruction{ .opcode = 0xb4, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb5 => Instruction{ .opcode = 0xb5, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb6 => Instruction{ .opcode = 0xb6, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb7 => Instruction{ .opcode = 0xb7, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb8 => Instruction{ .opcode = 0xb8, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xb9 => Instruction{ .opcode = 0xb9, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xba => Instruction{ .opcode = 0xba, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xbb => Instruction{ .opcode = 0xbb, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xbc => Instruction{ .opcode = 0xbc, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xbd => Instruction{ .opcode = 0xbd, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xbe => Instruction{ .opcode = 0xbe, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xbf => Instruction{ .opcode = 0xbf, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xc0 => Instruction{ .opcode = 0xc0, .op = OpType.RET, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nz }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xc1 => Instruction{ .opcode = 0xc1, .op = OpType.POP, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.BC }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xc2 => Instruction{ .opcode = 0xc2, .op = OpType.JP, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nz }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xc3 => Instruction{ .opcode = 0xc3, .op = OpType.JP, .operands = .{ Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 3 },
        0xc4 => Instruction{ .opcode = 0xc4, .op = OpType.CALL, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nz }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xc5 => Instruction{ .opcode = 0xc5, .op = OpType.PUSH, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.BC }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xc6 => Instruction{ .opcode = 0xc6, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc7 => Instruction{ .opcode = 0xc7, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x0 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xc8 => Instruction{ .opcode = 0xc8, .op = OpType.RET, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.z }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xc9 => Instruction{ .opcode = 0xc9, .op = OpType.RET, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xca => Instruction{ .opcode = 0xca, .op = OpType.JP, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.z }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xcb => Instruction{ .opcode = 0xcb, .op = OpType.PREFIX, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xcc => Instruction{ .opcode = 0xcc, .op = OpType.CALL, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.z }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xcd => Instruction{ .opcode = 0xcd, .op = OpType.CALL, .operands = .{ Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 3 },
        0xce => Instruction{ .opcode = 0xce, .op = OpType.ADC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xcf => Instruction{ .opcode = 0xcf, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x8 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xd0 => Instruction{ .opcode = 0xd0, .op = OpType.RET, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nc }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xd1 => Instruction{ .opcode = 0xd1, .op = OpType.POP, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.DE }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xd2 => Instruction{ .opcode = 0xd2, .op = OpType.JP, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nc }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xd3 => Instruction{ .opcode = 0xd3, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xd4 => Instruction{ .opcode = 0xd4, .op = OpType.CALL, .operands = .{ Operand{ .t=OperandType.cc, .relative = false, .cc = ConditionCode.nc }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xd5 => Instruction{ .opcode = 0xd5, .op = OpType.PUSH, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.DE }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xd6 => Instruction{ .opcode = 0xd6, .op = OpType.SUB, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd7 => Instruction{ .opcode = 0xd7, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x10 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xd8 => Instruction{ .opcode = 0xd8, .op = OpType.RET, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xd9 => Instruction{ .opcode = 0xd9, .op = OpType.RETI, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xda => Instruction{ .opcode = 0xda, .op = OpType.JP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xdb => Instruction{ .opcode = 0xdb, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xdc => Instruction{ .opcode = 0xdc, .op = OpType.CALL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.imm16, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xdd => Instruction{ .opcode = 0xdd, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xde => Instruction{ .opcode = 0xde, .op = OpType.SBC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xdf => Instruction{ .opcode = 0xdf, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x18 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xe0 => Instruction{ .opcode = 0xe0, .op = OpType.LDH, .operands = .{ Operand{ .t=OperandType.imm8, .relative = true }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe1 => Instruction{ .opcode = 0xe1, .op = OpType.POP, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xe2 => Instruction{ .opcode = 0xe2, .op = OpType.LDH, .operands = .{ Operand{ .t=OperandType.reg8, .relative = true, .register = Register.C }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xe3 => Instruction{ .opcode = 0xe3, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xe4 => Instruction{ .opcode = 0xe4, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xe5 => Instruction{ .opcode = 0xe5, .op = OpType.PUSH, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xe6 => Instruction{ .opcode = 0xe6, .op = OpType.AND, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe7 => Instruction{ .opcode = 0xe7, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x20 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xe8 => Instruction{ .opcode = 0xe8, .op = OpType.ADD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe9 => Instruction{ .opcode = 0xe9, .op = OpType.JP, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xea => Instruction{ .opcode = 0xea, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.imm16, .relative = true }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xeb => Instruction{ .opcode = 0xeb, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xec => Instruction{ .opcode = 0xec, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xed => Instruction{ .opcode = 0xed, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xee => Instruction{ .opcode = 0xee, .op = OpType.XOR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xef => Instruction{ .opcode = 0xef, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x28 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xf0 => Instruction{ .opcode = 0xf0, .op = OpType.LDH, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = true }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf1 => Instruction{ .opcode = 0xf1, .op = OpType.POP, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.AF }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xf2 => Instruction{ .opcode = 0xf2, .op = OpType.LDH, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.reg8, .relative = true, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xf3 => Instruction{ .opcode = 0xf3, .op = OpType.DI, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xf4 => Instruction{ .opcode = 0xf4, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xf5 => Instruction{ .opcode = 0xf5, .op = OpType.PUSH, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.AF }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xf6 => Instruction{ .opcode = 0xf6, .op = OpType.OR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf7 => Instruction{ .opcode = 0xf7, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x30 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
        0xf8 => Instruction{ .opcode = 0xf8, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.imm8, .relative = false } }, .num_operands = 3, .bytes = 2 },
        0xf9 => Instruction{ .opcode = 0xf9, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg16, .relative = false, .register = Register.SP }, Operand{ .t=OperandType.reg16, .relative = false, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 1 },
        0xfa => Instruction{ .opcode = 0xfa, .op = OpType.LD, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm16, .relative = true }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 3 },
        0xfb => Instruction{ .opcode = 0xfb, .op = OpType.EI, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xfc => Instruction{ .opcode = 0xfc, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xfd => Instruction{ .opcode = 0xfd, .op = OpType.ILLEGAL, .operands = .{ Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 0, .bytes = 1 },
        0xfe => Instruction{ .opcode = 0xfe, .op = OpType.CP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.imm8, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xff => Instruction{ .opcode = 0xff, .op = OpType.RST, .operands = .{ Operand{ .t=OperandType.vec, .relative = false, .value = 0x38 }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 1 },
    };
    return result;
}
pub fn decode_instruction_cb(opcode: u8) Instruction {
    const result = switch (opcode) {
        0x00 => Instruction{ .opcode = 0x00, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x01 => Instruction{ .opcode = 0x01, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x02 => Instruction{ .opcode = 0x02, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x03 => Instruction{ .opcode = 0x03, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x04 => Instruction{ .opcode = 0x04, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x05 => Instruction{ .opcode = 0x05, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x06 => Instruction{ .opcode = 0x06, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x07 => Instruction{ .opcode = 0x07, .op = OpType.RLC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x08 => Instruction{ .opcode = 0x08, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x09 => Instruction{ .opcode = 0x09, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x0a => Instruction{ .opcode = 0x0a, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x0b => Instruction{ .opcode = 0x0b, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x0c => Instruction{ .opcode = 0x0c, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x0d => Instruction{ .opcode = 0x0d, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x0e => Instruction{ .opcode = 0x0e, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x0f => Instruction{ .opcode = 0x0f, .op = OpType.RRC, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x10 => Instruction{ .opcode = 0x10, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x11 => Instruction{ .opcode = 0x11, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x12 => Instruction{ .opcode = 0x12, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x13 => Instruction{ .opcode = 0x13, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x14 => Instruction{ .opcode = 0x14, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x15 => Instruction{ .opcode = 0x15, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x16 => Instruction{ .opcode = 0x16, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x17 => Instruction{ .opcode = 0x17, .op = OpType.RL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x18 => Instruction{ .opcode = 0x18, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x19 => Instruction{ .opcode = 0x19, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x1a => Instruction{ .opcode = 0x1a, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x1b => Instruction{ .opcode = 0x1b, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x1c => Instruction{ .opcode = 0x1c, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x1d => Instruction{ .opcode = 0x1d, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x1e => Instruction{ .opcode = 0x1e, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x1f => Instruction{ .opcode = 0x1f, .op = OpType.RR, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x20 => Instruction{ .opcode = 0x20, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x21 => Instruction{ .opcode = 0x21, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x22 => Instruction{ .opcode = 0x22, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x23 => Instruction{ .opcode = 0x23, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x24 => Instruction{ .opcode = 0x24, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x25 => Instruction{ .opcode = 0x25, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x26 => Instruction{ .opcode = 0x26, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x27 => Instruction{ .opcode = 0x27, .op = OpType.SLA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x28 => Instruction{ .opcode = 0x28, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x29 => Instruction{ .opcode = 0x29, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x2a => Instruction{ .opcode = 0x2a, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x2b => Instruction{ .opcode = 0x2b, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x2c => Instruction{ .opcode = 0x2c, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x2d => Instruction{ .opcode = 0x2d, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x2e => Instruction{ .opcode = 0x2e, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x2f => Instruction{ .opcode = 0x2f, .op = OpType.SRA, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x30 => Instruction{ .opcode = 0x30, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x31 => Instruction{ .opcode = 0x31, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x32 => Instruction{ .opcode = 0x32, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x33 => Instruction{ .opcode = 0x33, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x34 => Instruction{ .opcode = 0x34, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x35 => Instruction{ .opcode = 0x35, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x36 => Instruction{ .opcode = 0x36, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x37 => Instruction{ .opcode = 0x37, .op = OpType.SWAP, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x38 => Instruction{ .opcode = 0x38, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x39 => Instruction{ .opcode = 0x39, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x3a => Instruction{ .opcode = 0x3a, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x3b => Instruction{ .opcode = 0x3b, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x3c => Instruction{ .opcode = 0x3c, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x3d => Instruction{ .opcode = 0x3d, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x3e => Instruction{ .opcode = 0x3e, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x3f => Instruction{ .opcode = 0x3f, .op = OpType.SRL, .operands = .{ Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 1, .bytes = 2 },
        0x40 => Instruction{ .opcode = 0x40, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x41 => Instruction{ .opcode = 0x41, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x42 => Instruction{ .opcode = 0x42, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x43 => Instruction{ .opcode = 0x43, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x44 => Instruction{ .opcode = 0x44, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x45 => Instruction{ .opcode = 0x45, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x46 => Instruction{ .opcode = 0x46, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x47 => Instruction{ .opcode = 0x47, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x48 => Instruction{ .opcode = 0x48, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x49 => Instruction{ .opcode = 0x49, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x4a => Instruction{ .opcode = 0x4a, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x4b => Instruction{ .opcode = 0x4b, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x4c => Instruction{ .opcode = 0x4c, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x4d => Instruction{ .opcode = 0x4d, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x4e => Instruction{ .opcode = 0x4e, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x4f => Instruction{ .opcode = 0x4f, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x50 => Instruction{ .opcode = 0x50, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x51 => Instruction{ .opcode = 0x51, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x52 => Instruction{ .opcode = 0x52, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x53 => Instruction{ .opcode = 0x53, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x54 => Instruction{ .opcode = 0x54, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x55 => Instruction{ .opcode = 0x55, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x56 => Instruction{ .opcode = 0x56, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x57 => Instruction{ .opcode = 0x57, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x58 => Instruction{ .opcode = 0x58, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x59 => Instruction{ .opcode = 0x59, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x5a => Instruction{ .opcode = 0x5a, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x5b => Instruction{ .opcode = 0x5b, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x5c => Instruction{ .opcode = 0x5c, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x5d => Instruction{ .opcode = 0x5d, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x5e => Instruction{ .opcode = 0x5e, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x5f => Instruction{ .opcode = 0x5f, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x60 => Instruction{ .opcode = 0x60, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x61 => Instruction{ .opcode = 0x61, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x62 => Instruction{ .opcode = 0x62, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x63 => Instruction{ .opcode = 0x63, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x64 => Instruction{ .opcode = 0x64, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x65 => Instruction{ .opcode = 0x65, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x66 => Instruction{ .opcode = 0x66, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x67 => Instruction{ .opcode = 0x67, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x68 => Instruction{ .opcode = 0x68, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x69 => Instruction{ .opcode = 0x69, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x6a => Instruction{ .opcode = 0x6a, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x6b => Instruction{ .opcode = 0x6b, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x6c => Instruction{ .opcode = 0x6c, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x6d => Instruction{ .opcode = 0x6d, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x6e => Instruction{ .opcode = 0x6e, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x6f => Instruction{ .opcode = 0x6f, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x70 => Instruction{ .opcode = 0x70, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x71 => Instruction{ .opcode = 0x71, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x72 => Instruction{ .opcode = 0x72, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x73 => Instruction{ .opcode = 0x73, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x74 => Instruction{ .opcode = 0x74, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x75 => Instruction{ .opcode = 0x75, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x76 => Instruction{ .opcode = 0x76, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x77 => Instruction{ .opcode = 0x77, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x78 => Instruction{ .opcode = 0x78, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x79 => Instruction{ .opcode = 0x79, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x7a => Instruction{ .opcode = 0x7a, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x7b => Instruction{ .opcode = 0x7b, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x7c => Instruction{ .opcode = 0x7c, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x7d => Instruction{ .opcode = 0x7d, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x7e => Instruction{ .opcode = 0x7e, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x7f => Instruction{ .opcode = 0x7f, .op = OpType.BIT, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x80 => Instruction{ .opcode = 0x80, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x81 => Instruction{ .opcode = 0x81, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x82 => Instruction{ .opcode = 0x82, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x83 => Instruction{ .opcode = 0x83, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x84 => Instruction{ .opcode = 0x84, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x85 => Instruction{ .opcode = 0x85, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x86 => Instruction{ .opcode = 0x86, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x87 => Instruction{ .opcode = 0x87, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x88 => Instruction{ .opcode = 0x88, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x89 => Instruction{ .opcode = 0x89, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x8a => Instruction{ .opcode = 0x8a, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x8b => Instruction{ .opcode = 0x8b, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x8c => Instruction{ .opcode = 0x8c, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x8d => Instruction{ .opcode = 0x8d, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x8e => Instruction{ .opcode = 0x8e, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x8f => Instruction{ .opcode = 0x8f, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x90 => Instruction{ .opcode = 0x90, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x91 => Instruction{ .opcode = 0x91, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x92 => Instruction{ .opcode = 0x92, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x93 => Instruction{ .opcode = 0x93, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x94 => Instruction{ .opcode = 0x94, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x95 => Instruction{ .opcode = 0x95, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x96 => Instruction{ .opcode = 0x96, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x97 => Instruction{ .opcode = 0x97, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x98 => Instruction{ .opcode = 0x98, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x99 => Instruction{ .opcode = 0x99, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x9a => Instruction{ .opcode = 0x9a, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x9b => Instruction{ .opcode = 0x9b, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x9c => Instruction{ .opcode = 0x9c, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x9d => Instruction{ .opcode = 0x9d, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x9e => Instruction{ .opcode = 0x9e, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0x9f => Instruction{ .opcode = 0x9f, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa0 => Instruction{ .opcode = 0xa0, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa1 => Instruction{ .opcode = 0xa1, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa2 => Instruction{ .opcode = 0xa2, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa3 => Instruction{ .opcode = 0xa3, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa4 => Instruction{ .opcode = 0xa4, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa5 => Instruction{ .opcode = 0xa5, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa6 => Instruction{ .opcode = 0xa6, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa7 => Instruction{ .opcode = 0xa7, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa8 => Instruction{ .opcode = 0xa8, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xa9 => Instruction{ .opcode = 0xa9, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xaa => Instruction{ .opcode = 0xaa, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xab => Instruction{ .opcode = 0xab, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xac => Instruction{ .opcode = 0xac, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xad => Instruction{ .opcode = 0xad, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xae => Instruction{ .opcode = 0xae, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xaf => Instruction{ .opcode = 0xaf, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb0 => Instruction{ .opcode = 0xb0, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb1 => Instruction{ .opcode = 0xb1, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb2 => Instruction{ .opcode = 0xb2, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb3 => Instruction{ .opcode = 0xb3, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb4 => Instruction{ .opcode = 0xb4, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb5 => Instruction{ .opcode = 0xb5, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb6 => Instruction{ .opcode = 0xb6, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb7 => Instruction{ .opcode = 0xb7, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb8 => Instruction{ .opcode = 0xb8, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xb9 => Instruction{ .opcode = 0xb9, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xba => Instruction{ .opcode = 0xba, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xbb => Instruction{ .opcode = 0xbb, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xbc => Instruction{ .opcode = 0xbc, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xbd => Instruction{ .opcode = 0xbd, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xbe => Instruction{ .opcode = 0xbe, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xbf => Instruction{ .opcode = 0xbf, .op = OpType.RES, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc0 => Instruction{ .opcode = 0xc0, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc1 => Instruction{ .opcode = 0xc1, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc2 => Instruction{ .opcode = 0xc2, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc3 => Instruction{ .opcode = 0xc3, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc4 => Instruction{ .opcode = 0xc4, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc5 => Instruction{ .opcode = 0xc5, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc6 => Instruction{ .opcode = 0xc6, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc7 => Instruction{ .opcode = 0xc7, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 0 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc8 => Instruction{ .opcode = 0xc8, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xc9 => Instruction{ .opcode = 0xc9, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xca => Instruction{ .opcode = 0xca, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xcb => Instruction{ .opcode = 0xcb, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xcc => Instruction{ .opcode = 0xcc, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xcd => Instruction{ .opcode = 0xcd, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xce => Instruction{ .opcode = 0xce, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xcf => Instruction{ .opcode = 0xcf, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 1 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd0 => Instruction{ .opcode = 0xd0, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd1 => Instruction{ .opcode = 0xd1, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd2 => Instruction{ .opcode = 0xd2, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd3 => Instruction{ .opcode = 0xd3, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd4 => Instruction{ .opcode = 0xd4, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd5 => Instruction{ .opcode = 0xd5, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd6 => Instruction{ .opcode = 0xd6, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd7 => Instruction{ .opcode = 0xd7, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 2 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd8 => Instruction{ .opcode = 0xd8, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xd9 => Instruction{ .opcode = 0xd9, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xda => Instruction{ .opcode = 0xda, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xdb => Instruction{ .opcode = 0xdb, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xdc => Instruction{ .opcode = 0xdc, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xdd => Instruction{ .opcode = 0xdd, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xde => Instruction{ .opcode = 0xde, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xdf => Instruction{ .opcode = 0xdf, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 3 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe0 => Instruction{ .opcode = 0xe0, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe1 => Instruction{ .opcode = 0xe1, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe2 => Instruction{ .opcode = 0xe2, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe3 => Instruction{ .opcode = 0xe3, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe4 => Instruction{ .opcode = 0xe4, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe5 => Instruction{ .opcode = 0xe5, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe6 => Instruction{ .opcode = 0xe6, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe7 => Instruction{ .opcode = 0xe7, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 4 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe8 => Instruction{ .opcode = 0xe8, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xe9 => Instruction{ .opcode = 0xe9, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xea => Instruction{ .opcode = 0xea, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xeb => Instruction{ .opcode = 0xeb, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xec => Instruction{ .opcode = 0xec, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xed => Instruction{ .opcode = 0xed, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xee => Instruction{ .opcode = 0xee, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xef => Instruction{ .opcode = 0xef, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 5 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf0 => Instruction{ .opcode = 0xf0, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf1 => Instruction{ .opcode = 0xf1, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf2 => Instruction{ .opcode = 0xf2, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf3 => Instruction{ .opcode = 0xf3, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf4 => Instruction{ .opcode = 0xf4, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf5 => Instruction{ .opcode = 0xf5, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf6 => Instruction{ .opcode = 0xf6, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf7 => Instruction{ .opcode = 0xf7, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 6 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf8 => Instruction{ .opcode = 0xf8, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.B }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xf9 => Instruction{ .opcode = 0xf9, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.C }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xfa => Instruction{ .opcode = 0xfa, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.D }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xfb => Instruction{ .opcode = 0xfb, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.E }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xfc => Instruction{ .opcode = 0xfc, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.H }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xfd => Instruction{ .opcode = 0xfd, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.L }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xfe => Instruction{ .opcode = 0xfe, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg16, .relative = true, .register = Register.HL }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
        0xff => Instruction{ .opcode = 0xff, .op = OpType.SET, .operands = .{ Operand{ .t=OperandType.bit3, .relative = false, .value = 7 }, Operand{ .t=OperandType.reg8, .relative = false, .register = Register.A }, Operand{ .t=OperandType.unused, .relative = false } }, .num_operands = 2, .bytes = 2 },
    };
    return result;
}
pub fn opcode_to_str(opcode: u8) []const u8 {
    switch (opcode) {
        0x00 => return "NOP",
        0x01 => return "LD BC, n16",
        0x02 => return "LD [BC], A",
        0x03 => return "INC BC",
        0x04 => return "INC B",
        0x05 => return "DEC B",
        0x06 => return "LD B, n8",
        0x07 => return "RLCA",
        0x08 => return "LD [a16], SP",
        0x09 => return "ADD HL, BC",
        0x0a => return "LD A, [BC]",
        0x0b => return "DEC BC",
        0x0c => return "INC C",
        0x0d => return "DEC C",
        0x0e => return "LD C, n8",
        0x0f => return "RRCA",
        0x10 => return "STOP n8",
        0x11 => return "LD DE, n16",
        0x12 => return "LD [DE], A",
        0x13 => return "INC DE",
        0x14 => return "INC D",
        0x15 => return "DEC D",
        0x16 => return "LD D, n8",
        0x17 => return "RLA",
        0x18 => return "JR e8",
        0x19 => return "ADD HL, DE",
        0x1a => return "LD A, [DE]",
        0x1b => return "DEC DE",
        0x1c => return "INC E",
        0x1d => return "DEC E",
        0x1e => return "LD E, n8",
        0x1f => return "RRA",
        0x20 => return "JR NZ, e8",
        0x21 => return "LD HL, n16",
        0x22 => return "LD [HL+], A",
        0x23 => return "INC HL",
        0x24 => return "INC H",
        0x25 => return "DEC H",
        0x26 => return "LD H, n8",
        0x27 => return "DAA",
        0x28 => return "JR Z, e8",
        0x29 => return "ADD HL, HL",
        0x2a => return "LD A, [HL+]",
        0x2b => return "DEC HL",
        0x2c => return "INC L",
        0x2d => return "DEC L",
        0x2e => return "LD L, n8",
        0x2f => return "CPL",
        0x30 => return "JR NC, e8",
        0x31 => return "LD SP, n16",
        0x32 => return "LD [HL-], A",
        0x33 => return "INC SP",
        0x34 => return "INC [HL]",
        0x35 => return "DEC [HL]",
        0x36 => return "LD [HL], n8",
        0x37 => return "SCF",
        0x38 => return "JR C, e8",
        0x39 => return "ADD HL, SP",
        0x3a => return "LD A, [HL-]",
        0x3b => return "DEC SP",
        0x3c => return "INC A",
        0x3d => return "DEC A",
        0x3e => return "LD A, n8",
        0x3f => return "CCF",
        0x40 => return "LD B, B",
        0x41 => return "LD B, C",
        0x42 => return "LD B, D",
        0x43 => return "LD B, E",
        0x44 => return "LD B, H",
        0x45 => return "LD B, L",
        0x46 => return "LD B, [HL]",
        0x47 => return "LD B, A",
        0x48 => return "LD C, B",
        0x49 => return "LD C, C",
        0x4a => return "LD C, D",
        0x4b => return "LD C, E",
        0x4c => return "LD C, H",
        0x4d => return "LD C, L",
        0x4e => return "LD C, [HL]",
        0x4f => return "LD C, A",
        0x50 => return "LD D, B",
        0x51 => return "LD D, C",
        0x52 => return "LD D, D",
        0x53 => return "LD D, E",
        0x54 => return "LD D, H",
        0x55 => return "LD D, L",
        0x56 => return "LD D, [HL]",
        0x57 => return "LD D, A",
        0x58 => return "LD E, B",
        0x59 => return "LD E, C",
        0x5a => return "LD E, D",
        0x5b => return "LD E, E",
        0x5c => return "LD E, H",
        0x5d => return "LD E, L",
        0x5e => return "LD E, [HL]",
        0x5f => return "LD E, A",
        0x60 => return "LD H, B",
        0x61 => return "LD H, C",
        0x62 => return "LD H, D",
        0x63 => return "LD H, E",
        0x64 => return "LD H, H",
        0x65 => return "LD H, L",
        0x66 => return "LD H, [HL]",
        0x67 => return "LD H, A",
        0x68 => return "LD L, B",
        0x69 => return "LD L, C",
        0x6a => return "LD L, D",
        0x6b => return "LD L, E",
        0x6c => return "LD L, H",
        0x6d => return "LD L, L",
        0x6e => return "LD L, [HL]",
        0x6f => return "LD L, A",
        0x70 => return "LD [HL], B",
        0x71 => return "LD [HL], C",
        0x72 => return "LD [HL], D",
        0x73 => return "LD [HL], E",
        0x74 => return "LD [HL], H",
        0x75 => return "LD [HL], L",
        0x76 => return "HALT",
        0x77 => return "LD [HL], A",
        0x78 => return "LD A, B",
        0x79 => return "LD A, C",
        0x7a => return "LD A, D",
        0x7b => return "LD A, E",
        0x7c => return "LD A, H",
        0x7d => return "LD A, L",
        0x7e => return "LD A, [HL]",
        0x7f => return "LD A, A",
        0x80 => return "ADD A, B",
        0x81 => return "ADD A, C",
        0x82 => return "ADD A, D",
        0x83 => return "ADD A, E",
        0x84 => return "ADD A, H",
        0x85 => return "ADD A, L",
        0x86 => return "ADD A, [HL]",
        0x87 => return "ADD A, A",
        0x88 => return "ADC A, B",
        0x89 => return "ADC A, C",
        0x8a => return "ADC A, D",
        0x8b => return "ADC A, E",
        0x8c => return "ADC A, H",
        0x8d => return "ADC A, L",
        0x8e => return "ADC A, [HL]",
        0x8f => return "ADC A, A",
        0x90 => return "SUB A, B",
        0x91 => return "SUB A, C",
        0x92 => return "SUB A, D",
        0x93 => return "SUB A, E",
        0x94 => return "SUB A, H",
        0x95 => return "SUB A, L",
        0x96 => return "SUB A, [HL]",
        0x97 => return "SUB A, A",
        0x98 => return "SBC A, B",
        0x99 => return "SBC A, C",
        0x9a => return "SBC A, D",
        0x9b => return "SBC A, E",
        0x9c => return "SBC A, H",
        0x9d => return "SBC A, L",
        0x9e => return "SBC A, [HL]",
        0x9f => return "SBC A, A",
        0xa0 => return "AND A, B",
        0xa1 => return "AND A, C",
        0xa2 => return "AND A, D",
        0xa3 => return "AND A, E",
        0xa4 => return "AND A, H",
        0xa5 => return "AND A, L",
        0xa6 => return "AND A, [HL]",
        0xa7 => return "AND A, A",
        0xa8 => return "XOR A, B",
        0xa9 => return "XOR A, C",
        0xaa => return "XOR A, D",
        0xab => return "XOR A, E",
        0xac => return "XOR A, H",
        0xad => return "XOR A, L",
        0xae => return "XOR A, [HL]",
        0xaf => return "XOR A, A",
        0xb0 => return "OR A, B",
        0xb1 => return "OR A, C",
        0xb2 => return "OR A, D",
        0xb3 => return "OR A, E",
        0xb4 => return "OR A, H",
        0xb5 => return "OR A, L",
        0xb6 => return "OR A, [HL]",
        0xb7 => return "OR A, A",
        0xb8 => return "CP A, B",
        0xb9 => return "CP A, C",
        0xba => return "CP A, D",
        0xbb => return "CP A, E",
        0xbc => return "CP A, H",
        0xbd => return "CP A, L",
        0xbe => return "CP A, [HL]",
        0xbf => return "CP A, A",
        0xc0 => return "RET NZ",
        0xc1 => return "POP BC",
        0xc2 => return "JP NZ, a16",
        0xc3 => return "JP a16",
        0xc4 => return "CALL NZ, a16",
        0xc5 => return "PUSH BC",
        0xc6 => return "ADD A, n8",
        0xc7 => return "RST $00",
        0xc8 => return "RET Z",
        0xc9 => return "RET",
        0xca => return "JP Z, a16",
        0xcb => return "PREFIX",
        0xcc => return "CALL Z, a16",
        0xcd => return "CALL a16",
        0xce => return "ADC A, n8",
        0xcf => return "RST $08",
        0xd0 => return "RET NC",
        0xd1 => return "POP DE",
        0xd2 => return "JP NC, a16",
        0xd3 => return "ILLEGAL",
        0xd4 => return "CALL NC, a16",
        0xd5 => return "PUSH DE",
        0xd6 => return "SUB A, n8",
        0xd7 => return "RST $10",
        0xd8 => return "RET C",
        0xd9 => return "RETI",
        0xda => return "JP C, a16",
        0xdb => return "ILLEGAL",
        0xdc => return "CALL C, a16",
        0xdd => return "ILLEGAL",
        0xde => return "SBC A, n8",
        0xdf => return "RST $18",
        0xe0 => return "LDH [a8], A",
        0xe1 => return "POP HL",
        0xe2 => return "LDH [C], A",
        0xe3 => return "ILLEGAL",
        0xe4 => return "ILLEGAL",
        0xe5 => return "PUSH HL",
        0xe6 => return "AND A, n8",
        0xe7 => return "RST $20",
        0xe8 => return "ADD SP, e8",
        0xe9 => return "JP HL",
        0xea => return "LD [a16], A",
        0xeb => return "ILLEGAL",
        0xec => return "ILLEGAL",
        0xed => return "ILLEGAL",
        0xee => return "XOR A, n8",
        0xef => return "RST $28",
        0xf0 => return "LDH A, [a8]",
        0xf1 => return "POP AF",
        0xf2 => return "LDH A, [C]",
        0xf3 => return "DI",
        0xf4 => return "ILLEGAL",
        0xf5 => return "PUSH AF",
        0xf6 => return "OR A, n8",
        0xf7 => return "RST $30",
        0xf8 => return "LD HL, SP+, e8",
        0xf9 => return "LD SP, HL",
        0xfa => return "LD A, [a16]",
        0xfb => return "EI",
        0xfc => return "ILLEGAL",
        0xfd => return "ILLEGAL",
        0xfe => return "CP A, n8",
        0xff => return "RST $38",
    }
}pub fn opcode_to_str_cb(opcode: u8) []const u8 {
    switch (opcode) {
        0x00 => return "RLC B",
        0x01 => return "RLC C",
        0x02 => return "RLC D",
        0x03 => return "RLC E",
        0x04 => return "RLC H",
        0x05 => return "RLC L",
        0x06 => return "RLC [HL]",
        0x07 => return "RLC A",
        0x08 => return "RRC B",
        0x09 => return "RRC C",
        0x0a => return "RRC D",
        0x0b => return "RRC E",
        0x0c => return "RRC H",
        0x0d => return "RRC L",
        0x0e => return "RRC [HL]",
        0x0f => return "RRC A",
        0x10 => return "RL B",
        0x11 => return "RL C",
        0x12 => return "RL D",
        0x13 => return "RL E",
        0x14 => return "RL H",
        0x15 => return "RL L",
        0x16 => return "RL [HL]",
        0x17 => return "RL A",
        0x18 => return "RR B",
        0x19 => return "RR C",
        0x1a => return "RR D",
        0x1b => return "RR E",
        0x1c => return "RR H",
        0x1d => return "RR L",
        0x1e => return "RR [HL]",
        0x1f => return "RR A",
        0x20 => return "SLA B",
        0x21 => return "SLA C",
        0x22 => return "SLA D",
        0x23 => return "SLA E",
        0x24 => return "SLA H",
        0x25 => return "SLA L",
        0x26 => return "SLA [HL]",
        0x27 => return "SLA A",
        0x28 => return "SRA B",
        0x29 => return "SRA C",
        0x2a => return "SRA D",
        0x2b => return "SRA E",
        0x2c => return "SRA H",
        0x2d => return "SRA L",
        0x2e => return "SRA [HL]",
        0x2f => return "SRA A",
        0x30 => return "SWAP B",
        0x31 => return "SWAP C",
        0x32 => return "SWAP D",
        0x33 => return "SWAP E",
        0x34 => return "SWAP H",
        0x35 => return "SWAP L",
        0x36 => return "SWAP [HL]",
        0x37 => return "SWAP A",
        0x38 => return "SRL B",
        0x39 => return "SRL C",
        0x3a => return "SRL D",
        0x3b => return "SRL E",
        0x3c => return "SRL H",
        0x3d => return "SRL L",
        0x3e => return "SRL [HL]",
        0x3f => return "SRL A",
        0x40 => return "BIT 0, B",
        0x41 => return "BIT 0, C",
        0x42 => return "BIT 0, D",
        0x43 => return "BIT 0, E",
        0x44 => return "BIT 0, H",
        0x45 => return "BIT 0, L",
        0x46 => return "BIT 0, [HL]",
        0x47 => return "BIT 0, A",
        0x48 => return "BIT 1, B",
        0x49 => return "BIT 1, C",
        0x4a => return "BIT 1, D",
        0x4b => return "BIT 1, E",
        0x4c => return "BIT 1, H",
        0x4d => return "BIT 1, L",
        0x4e => return "BIT 1, [HL]",
        0x4f => return "BIT 1, A",
        0x50 => return "BIT 2, B",
        0x51 => return "BIT 2, C",
        0x52 => return "BIT 2, D",
        0x53 => return "BIT 2, E",
        0x54 => return "BIT 2, H",
        0x55 => return "BIT 2, L",
        0x56 => return "BIT 2, [HL]",
        0x57 => return "BIT 2, A",
        0x58 => return "BIT 3, B",
        0x59 => return "BIT 3, C",
        0x5a => return "BIT 3, D",
        0x5b => return "BIT 3, E",
        0x5c => return "BIT 3, H",
        0x5d => return "BIT 3, L",
        0x5e => return "BIT 3, [HL]",
        0x5f => return "BIT 3, A",
        0x60 => return "BIT 4, B",
        0x61 => return "BIT 4, C",
        0x62 => return "BIT 4, D",
        0x63 => return "BIT 4, E",
        0x64 => return "BIT 4, H",
        0x65 => return "BIT 4, L",
        0x66 => return "BIT 4, [HL]",
        0x67 => return "BIT 4, A",
        0x68 => return "BIT 5, B",
        0x69 => return "BIT 5, C",
        0x6a => return "BIT 5, D",
        0x6b => return "BIT 5, E",
        0x6c => return "BIT 5, H",
        0x6d => return "BIT 5, L",
        0x6e => return "BIT 5, [HL]",
        0x6f => return "BIT 5, A",
        0x70 => return "BIT 6, B",
        0x71 => return "BIT 6, C",
        0x72 => return "BIT 6, D",
        0x73 => return "BIT 6, E",
        0x74 => return "BIT 6, H",
        0x75 => return "BIT 6, L",
        0x76 => return "BIT 6, [HL]",
        0x77 => return "BIT 6, A",
        0x78 => return "BIT 7, B",
        0x79 => return "BIT 7, C",
        0x7a => return "BIT 7, D",
        0x7b => return "BIT 7, E",
        0x7c => return "BIT 7, H",
        0x7d => return "BIT 7, L",
        0x7e => return "BIT 7, [HL]",
        0x7f => return "BIT 7, A",
        0x80 => return "RES 0, B",
        0x81 => return "RES 0, C",
        0x82 => return "RES 0, D",
        0x83 => return "RES 0, E",
        0x84 => return "RES 0, H",
        0x85 => return "RES 0, L",
        0x86 => return "RES 0, [HL]",
        0x87 => return "RES 0, A",
        0x88 => return "RES 1, B",
        0x89 => return "RES 1, C",
        0x8a => return "RES 1, D",
        0x8b => return "RES 1, E",
        0x8c => return "RES 1, H",
        0x8d => return "RES 1, L",
        0x8e => return "RES 1, [HL]",
        0x8f => return "RES 1, A",
        0x90 => return "RES 2, B",
        0x91 => return "RES 2, C",
        0x92 => return "RES 2, D",
        0x93 => return "RES 2, E",
        0x94 => return "RES 2, H",
        0x95 => return "RES 2, L",
        0x96 => return "RES 2, [HL]",
        0x97 => return "RES 2, A",
        0x98 => return "RES 3, B",
        0x99 => return "RES 3, C",
        0x9a => return "RES 3, D",
        0x9b => return "RES 3, E",
        0x9c => return "RES 3, H",
        0x9d => return "RES 3, L",
        0x9e => return "RES 3, [HL]",
        0x9f => return "RES 3, A",
        0xa0 => return "RES 4, B",
        0xa1 => return "RES 4, C",
        0xa2 => return "RES 4, D",
        0xa3 => return "RES 4, E",
        0xa4 => return "RES 4, H",
        0xa5 => return "RES 4, L",
        0xa6 => return "RES 4, [HL]",
        0xa7 => return "RES 4, A",
        0xa8 => return "RES 5, B",
        0xa9 => return "RES 5, C",
        0xaa => return "RES 5, D",
        0xab => return "RES 5, E",
        0xac => return "RES 5, H",
        0xad => return "RES 5, L",
        0xae => return "RES 5, [HL]",
        0xaf => return "RES 5, A",
        0xb0 => return "RES 6, B",
        0xb1 => return "RES 6, C",
        0xb2 => return "RES 6, D",
        0xb3 => return "RES 6, E",
        0xb4 => return "RES 6, H",
        0xb5 => return "RES 6, L",
        0xb6 => return "RES 6, [HL]",
        0xb7 => return "RES 6, A",
        0xb8 => return "RES 7, B",
        0xb9 => return "RES 7, C",
        0xba => return "RES 7, D",
        0xbb => return "RES 7, E",
        0xbc => return "RES 7, H",
        0xbd => return "RES 7, L",
        0xbe => return "RES 7, [HL]",
        0xbf => return "RES 7, A",
        0xc0 => return "SET 0, B",
        0xc1 => return "SET 0, C",
        0xc2 => return "SET 0, D",
        0xc3 => return "SET 0, E",
        0xc4 => return "SET 0, H",
        0xc5 => return "SET 0, L",
        0xc6 => return "SET 0, [HL]",
        0xc7 => return "SET 0, A",
        0xc8 => return "SET 1, B",
        0xc9 => return "SET 1, C",
        0xca => return "SET 1, D",
        0xcb => return "SET 1, E",
        0xcc => return "SET 1, H",
        0xcd => return "SET 1, L",
        0xce => return "SET 1, [HL]",
        0xcf => return "SET 1, A",
        0xd0 => return "SET 2, B",
        0xd1 => return "SET 2, C",
        0xd2 => return "SET 2, D",
        0xd3 => return "SET 2, E",
        0xd4 => return "SET 2, H",
        0xd5 => return "SET 2, L",
        0xd6 => return "SET 2, [HL]",
        0xd7 => return "SET 2, A",
        0xd8 => return "SET 3, B",
        0xd9 => return "SET 3, C",
        0xda => return "SET 3, D",
        0xdb => return "SET 3, E",
        0xdc => return "SET 3, H",
        0xdd => return "SET 3, L",
        0xde => return "SET 3, [HL]",
        0xdf => return "SET 3, A",
        0xe0 => return "SET 4, B",
        0xe1 => return "SET 4, C",
        0xe2 => return "SET 4, D",
        0xe3 => return "SET 4, E",
        0xe4 => return "SET 4, H",
        0xe5 => return "SET 4, L",
        0xe6 => return "SET 4, [HL]",
        0xe7 => return "SET 4, A",
        0xe8 => return "SET 5, B",
        0xe9 => return "SET 5, C",
        0xea => return "SET 5, D",
        0xeb => return "SET 5, E",
        0xec => return "SET 5, H",
        0xed => return "SET 5, L",
        0xee => return "SET 5, [HL]",
        0xef => return "SET 5, A",
        0xf0 => return "SET 6, B",
        0xf1 => return "SET 6, C",
        0xf2 => return "SET 6, D",
        0xf3 => return "SET 6, E",
        0xf4 => return "SET 6, H",
        0xf5 => return "SET 6, L",
        0xf6 => return "SET 6, [HL]",
        0xf7 => return "SET 6, A",
        0xf8 => return "SET 7, B",
        0xf9 => return "SET 7, C",
        0xfa => return "SET 7, D",
        0xfb => return "SET 7, E",
        0xfc => return "SET 7, H",
        0xfd => return "SET 7, L",
        0xfe => return "SET 7, [HL]",
        0xff => return "SET 7, A",
    }
}